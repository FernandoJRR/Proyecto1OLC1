
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.universidad.appproyecto1.analisis.analisisCopy;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Hashtable;
import java.util.Set;
import java.util.Map;
import java.util.LinkedList;
import com.universidad.appproyecto1.analisis.CompileError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCopy extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCopy() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCopy(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCopy(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\002\003\000\002\003\005\000\002\003\002" +
    "\000\002\003\005\000\002\003\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\014\002\uffff\003\005\004\007\005\010\006" +
    "\006\001\002\000\010\002\ufffc\003\024\011\023\001\002" +
    "\000\010\002\ufffe\003\014\010\015\001\002\000\006\003" +
    "\014\010\015\001\002\000\006\003\014\010\015\001\002" +
    "\000\006\003\014\010\015\001\002\000\004\002\012\001" +
    "\002\000\004\002\001\001\002\000\010\002\ufff7\003\ufff7" +
    "\011\ufff7\001\002\000\004\007\017\001\002\000\004\007" +
    "\016\001\002\000\010\002\ufff5\003\ufff5\011\ufff5\001\002" +
    "\000\010\002\ufff4\003\ufff4\011\ufff4\001\002\000\010\002" +
    "\ufff9\003\ufff9\011\ufff9\001\002\000\010\002\ufff8\003\ufff8" +
    "\011\ufff8\001\002\000\010\002\ufff6\003\ufff6\011\ufff6\001" +
    "\002\000\012\003\034\004\007\005\010\006\006\001\002" +
    "\000\016\002\ufffc\003\027\004\007\005\010\006\006\011" +
    "\023\001\002\000\004\002\000\001\002\000\010\002\ufffc" +
    "\003\024\011\023\001\002\000\020\002\ufffc\003\031\004" +
    "\007\005\010\006\006\010\015\011\023\001\002\000\004" +
    "\002\ufffa\001\002\000\022\002\ufffc\003\031\004\007\005" +
    "\010\006\006\007\017\010\015\011\023\001\002\000\004" +
    "\002\ufffb\001\002\000\010\002\ufffc\003\024\011\023\001" +
    "\002\000\006\003\014\010\015\001\002\000\004\002\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\006\002\010\004\003\001\001\000\004\003" +
    "\024\001\001\000\004\005\021\001\001\000\004\005\020" +
    "\001\001\000\004\005\017\001\001\000\004\005\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\032\001\001\000\006\003\027\004" +
    "\025\001\001\000\002\001\001\000\004\003\031\001\001" +
    "\000\010\003\027\004\025\005\021\001\001\000\002\001" +
    "\001\000\010\003\027\004\025\005\021\001\001\000\002" +
    "\001\001\000\004\003\034\001\001\000\004\005\021\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCopy$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCopy$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCopy$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    private ArrayList<Symbol[]> campos = new ArrayList<>();
    
    private void agregarCampo(Symbol campo, Symbol informacion){
        campos.add(new Symbol[]{campo,informacion});
    }
    
    public ArrayList<Symbol[]> getCampos(){
        return campos;
    }
    
    private ArrayList<CompileError> erroresEncontrados; 
    
    public ArrayList<CompileError> getErroresEncontrados(){
        return erroresEncontrados;
    }
    public void setErroresEncontrados(ArrayList<CompileError> erroresEncontrados){
        this.erroresEncontrados = erroresEncontrados;
    }
    
    private void agregarError(Symbol symbolError, String mensajeError){
        erroresEncontrados.add(new CompileError(symbolError, "Sintactico", mensajeError));
    }
    
    private Stack<Symbol> errorStack = new Stack<>();

    public void syntax_error(Symbol s){
        this.s = s;
        errorStack.push(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        this.s = s;
        errorStack.push(s);
        Symbol e = errorStack.pop();
        agregarError(e,"Error Irrecuperable");
    }
    
    public Symbol getS(){
        return this.s;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCopy$actions {
  private final ParserCopy parser;

  /** Constructor */
  CUP$ParserCopy$actions(ParserCopy parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCopy$do_action_part00000000(
    int                        CUP$ParserCopy$act_num,
    java_cup.runtime.lr_parser CUP$ParserCopy$parser,
    java.util.Stack            CUP$ParserCopy$stack,
    int                        CUP$ParserCopy$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCopy$result;

      /* select the action based on the action number */
      switch (CUP$ParserCopy$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).value;
		RESULT = start_val;
              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCopy$parser.done_parsing();
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= campo declaraciones_campos 
            {
              Object RESULT =null;

              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_campos ::= COMA campo declaraciones_campos 
            {
              Object RESULT =null;

              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("declaraciones_campos",1, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones_campos ::= 
            {
              Object RESULT =null;

              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("declaraciones_campos",1, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones_campos ::= error campo declaraciones_campos 
            {
              Object RESULT =null;

              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("declaraciones_campos",1, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones_campos ::= error declaraciones_campos 
            {
              Object RESULT =null;

              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("declaraciones_campos",1, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // campo ::= NOMBRE_PROYECTO informacion_campo 
            {
              Object RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).right;
		Object campo = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).value;
		int informacionleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).left;
		int informacionright = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).right;
		Object informacion = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.peek()).value;
		Symbol campoSymbol = new Symbol(sym.NOMBRE_PROYECTO,campoleft,camporight,campo);
        agregarCampo(campoSymbol,(Symbol)informacion);
              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("campo",2, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // campo ::= DIRECTORIO_DEF informacion_campo 
            {
              Object RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).right;
		Object campo = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).value;
		int informacionleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).left;
		int informacionright = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).right;
		Object informacion = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.peek()).value;
		Symbol campoSymbol = new Symbol(sym.NOMBRE_PROYECTO,campoleft,camporight,campo);
        agregarCampo(campoSymbol,(Symbol)informacion);
              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("campo",2, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // campo ::= DIRECTORIO_JSON informacion_campo 
            {
              Object RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).right;
		Object campo = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)).value;
		int informacionleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).left;
		int informacionright = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).right;
		Object informacion = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.peek()).value;
		Symbol campoSymbol = new Symbol(sym.NOMBRE_PROYECTO,campoleft,camporight,campo);
        agregarCampo(campoSymbol,(Symbol)informacion);
              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("campo",2, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // campo ::= error informacion_campo 
            {
              Object RESULT =null;
		int informacionleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).left;
		int informacionright = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).right;
		Object informacion = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.peek()).value;
		
        Symbol e = errorStack.pop();
        agregarCampo(e,(Symbol)informacion);
        
              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("campo",2, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // informacion_campo ::= DOS_PUNTOS STRING 
            {
              Object RESULT =null;
		int informacionleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).left;
		int informacionright = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).right;
		Object informacion = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.peek()).value;
		RESULT = new Symbol(sym.STRING,informacionleft,informacionright,informacion);
              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("informacion_campo",3, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // informacion_campo ::= error STRING 
            {
              Object RESULT =null;
		int informacionleft = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).left;
		int informacionright = ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()).right;
		Object informacion = (Object)((java_cup.runtime.Symbol) CUP$ParserCopy$stack.peek()).value;
		RESULT = new Symbol(sym.STRING,informacionleft,informacionright,informacion);
              CUP$ParserCopy$result = parser.getSymbolFactory().newSymbol("informacion_campo",3, ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.elementAt(CUP$ParserCopy$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCopy$stack.peek()), RESULT);
            }
          return CUP$ParserCopy$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCopy$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCopy$do_action(
    int                        CUP$ParserCopy$act_num,
    java_cup.runtime.lr_parser CUP$ParserCopy$parser,
    java.util.Stack            CUP$ParserCopy$stack,
    int                        CUP$ParserCopy$top)
    throws java.lang.Exception
    {
              return CUP$ParserCopy$do_action_part00000000(
                               CUP$ParserCopy$act_num,
                               CUP$ParserCopy$parser,
                               CUP$ParserCopy$stack,
                               CUP$ParserCopy$top);
    }
}

}
