
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.universidad.appproyecto1.analisis.analisisDef;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Hashtable;
import java.util.Set;
import java.util.Map;
import java.util.LinkedList;
import com.universidad.appproyecto1.analisis.CompileError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDef extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDef() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDef(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDef(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\014\004\000\002\014\003\000\002\015\006\000" +
    "\002\005\012\000\002\005\002\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\013\003\000\002\007" +
    "\012\000\002\007\012\000\002\007\012\000\002\007\012" +
    "\000\002\007\012\000\002\007\012\000\002\007\012\000" +
    "\002\007\006\000\002\010\012\000\002\023\003\000\002" +
    "\023\003\000\002\011\011\000\002\012\003\000\002\012" +
    "\003\000\002\012\002\000\002\016\005\000\002\017\003" +
    "\000\002\017\007\000\002\020\004\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\004\000\002\021\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\004\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\004\000\002\022\005\000\002\022\003\000\002" +
    "\022\003\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\010\004\007\005\010\045\004\001\002\000" +
    "\004\040\020\001\002\000\006\002\ufff7\042\050\001\002" +
    "\000\010\004\007\005\010\045\004\001\002\000\004\045" +
    "\015\001\002\000\004\045\015\001\002\000\004\002\014" +
    "\001\002\000\010\004\007\005\010\045\004\001\002\000" +
    "\006\002\ufffe\042\ufffe\001\002\000\004\002\001\001\002" +
    "\000\006\024\021\040\020\001\002\000\010\004\ufffc\005" +
    "\ufffc\045\ufffc\001\002\000\010\004\ufffa\005\ufffa\045\ufffa" +
    "\001\002\000\016\003\025\027\026\036\023\044\027\045" +
    "\022\046\024\001\002\000\010\004\ufffb\005\ufffb\045\ufffb" +
    "\001\002\000\020\024\uffd7\030\uffd7\032\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\001\002\000\016\003\025\027\026" +
    "\036\023\044\027\045\022\046\024\001\002\000\020\024" +
    "\uffd9\030\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\001\002\000\016\003\025\027\026\036\023\044\027\045" +
    "\022\046\024\001\002\000\016\003\025\027\026\036\023" +
    "\044\027\045\022\046\024\001\002\000\020\024\uffd8\030" +
    "\uffd8\032\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\001\002" +
    "\000\014\024\034\034\032\035\031\036\033\037\035\001" +
    "\002\000\016\003\025\027\026\036\023\044\027\045\022" +
    "\046\024\001\002\000\016\003\025\027\026\036\023\044" +
    "\027\045\022\046\024\001\002\000\016\003\025\027\026" +
    "\036\023\044\027\045\022\046\024\001\002\000\010\004" +
    "\ufff9\005\ufff9\045\ufff9\001\002\000\016\003\025\027\026" +
    "\036\023\044\027\045\022\046\024\001\002\000\020\024" +
    "\uffdc\030\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\001\002\000\020\024\uffde\030\uffde\032\uffde\034\uffde\035" +
    "\031\036\uffde\037\035\001\002\000\020\024\uffdf\030\uffdf" +
    "\032\uffdf\034\uffdf\035\031\036\uffdf\037\035\001\002\000" +
    "\020\024\uffdd\030\uffdd\032\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\001\002\000\014\030\043\034\032\035\031\036" +
    "\033\037\035\001\002\000\020\024\uffda\030\uffda\032\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\001\002\000\020\024" +
    "\uffd6\030\uffd6\032\uffd6\034\032\035\031\036\033\037\035" +
    "\001\002\000\020\024\uffdb\030\uffdb\032\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\001\002\000\010\004\ufffd\005\ufffd" +
    "\045\ufffd\001\002\000\006\002\uffff\042\uffff\001\002\000" +
    "\004\006\052\001\002\000\004\002\000\001\002\000\004" +
    "\041\053\001\002\000\010\042\057\043\055\047\054\001" +
    "\002\000\004\042\ufff3\001\002\000\004\043\165\001\002" +
    "\000\004\042\ufff6\001\002\000\022\006\070\007\074\010" +
    "\076\011\073\014\071\015\077\016\067\017\075\001\002" +
    "\000\004\042\063\001\002\000\004\042\ufff4\001\002\000" +
    "\004\042\ufff5\001\002\000\004\037\064\001\002\000\004" +
    "\006\065\001\002\000\004\041\066\001\002\000\004\002" +
    "\ufff8\001\002\000\004\041\157\001\002\000\004\041\151" +
    "\001\002\000\004\041\143\001\002\000\004\041\135\001" +
    "\002\000\004\012\124\001\002\000\004\041\116\001\002" +
    "\000\004\041\114\001\002\000\004\041\106\001\002\000" +
    "\004\041\100\001\002\000\010\042\057\043\055\047\054" +
    "\001\002\000\004\042\102\001\002\000\004\037\103\001" +
    "\002\000\004\015\104\001\002\000\004\041\105\001\002" +
    "\000\004\042\uffed\001\002\000\010\042\057\043\055\047" +
    "\054\001\002\000\004\042\110\001\002\000\004\037\111" +
    "\001\002\000\004\010\112\001\002\000\004\041\113\001" +
    "\002\000\004\042\ufff0\001\002\000\010\042\057\043\055" +
    "\047\054\001\002\000\004\042\uffeb\001\002\000\010\042" +
    "\057\043\055\047\054\001\002\000\004\042\120\001\002" +
    "\000\004\037\121\001\002\000\004\007\122\001\002\000" +
    "\004\041\123\001\002\000\004\042\ufff1\001\002\000\004" +
    "\023\125\001\002\000\006\044\130\045\126\001\002\000" +
    "\006\013\uffe9\024\uffe9\001\002\000\004\013\131\001\002" +
    "\000\006\013\uffe8\024\uffe8\001\002\000\004\023\132\001" +
    "\002\000\006\044\130\045\126\001\002\000\004\024\134" +
    "\001\002\000\004\041\uffea\001\002\000\010\042\057\043" +
    "\055\047\054\001\002\000\004\042\137\001\002\000\004" +
    "\037\140\001\002\000\004\011\141\001\002\000\004\041" +
    "\142\001\002\000\004\042\uffef\001\002\000\010\042\057" +
    "\043\055\047\054\001\002\000\004\042\145\001\002\000" +
    "\004\037\146\001\002\000\004\014\147\001\002\000\004" +
    "\041\150\001\002\000\004\042\uffee\001\002\000\010\042" +
    "\057\043\055\047\054\001\002\000\004\042\153\001\002" +
    "\000\004\037\154\001\002\000\004\006\155\001\002\000" +
    "\004\041\156\001\002\000\004\042\ufff2\001\002\000\010" +
    "\042\057\043\055\047\054\001\002\000\004\042\161\001" +
    "\002\000\004\037\162\001\002\000\004\016\163\001\002" +
    "\000\004\041\164\001\002\000\004\042\uffec\001\002\000" +
    "\004\027\166\001\002\000\010\020\172\030\uffe4\045\170" +
    "\001\002\000\004\030\uffe5\001\002\000\004\030\uffe6\001" +
    "\002\000\004\030\226\001\002\000\004\021\173\001\002" +
    "\000\004\045\174\001\002\000\006\030\uffe2\031\176\001" +
    "\002\000\004\030\uffe3\001\002\000\016\003\201\027\203" +
    "\036\200\044\204\045\177\046\024\001\002\000\014\032" +
    "\uffce\034\uffd7\035\uffd7\036\uffd7\037\uffd7\001\002\000\016" +
    "\003\025\027\026\036\023\044\027\045\022\046\024\001" +
    "\002\000\016\003\025\027\026\036\023\044\027\045\022" +
    "\046\024\001\002\000\004\032\220\001\002\000\016\003" +
    "\025\027\026\036\023\044\027\045\022\046\024\001\002" +
    "\000\014\032\uffcf\034\uffd8\035\uffd8\036\uffd8\037\uffd8\001" +
    "\002\000\012\034\206\035\207\036\210\037\211\001\002" +
    "\000\016\003\025\027\026\036\023\044\027\045\022\046" +
    "\024\001\002\000\016\003\025\027\026\036\023\044\027" +
    "\045\022\046\024\001\002\000\016\003\025\027\026\036" +
    "\023\044\027\045\022\046\024\001\002\000\016\003\025" +
    "\027\026\036\023\044\027\045\022\046\024\001\002\000" +
    "\014\032\uffd2\034\uffdc\035\uffdc\036\uffdc\037\uffdc\001\002" +
    "\000\014\032\uffd4\034\uffde\035\031\036\uffde\037\035\001" +
    "\002\000\014\032\uffd3\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\001\002\000\014\032\uffd5\034\uffdf\035\031\036\uffdf\037" +
    "\035\001\002\000\014\030\217\034\032\035\031\036\033" +
    "\037\035\001\002\000\014\032\uffd0\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\001\002\000\004\021\221\001\002\000\004" +
    "\045\223\001\002\000\004\030\uffe1\001\002\000\004\030" +
    "\uffe0\001\002\000\014\032\uffcd\034\032\035\031\036\033" +
    "\037\035\001\002\000\014\032\uffd1\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\001\002\000\004\043\227\001\002\000\004" +
    "\043\230\001\002\000\004\042\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\012\002\010\003\004\004\005\015\011\001" +
    "\001\000\002\001\001\000\004\005\050\001\001\000\010" +
    "\003\046\004\005\015\011\001\001\000\006\014\045\015" +
    "\016\001\001\000\006\014\015\015\016\001\001\000\002" +
    "\001\001\000\010\003\012\004\005\015\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\044\001\001" +
    "\000\002\001\001\000\004\021\043\001\001\000\004\021" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\040\001\001\000\004\021\037\001\001\000\004\021" +
    "\036\001\001\000\002\001\001\000\004\021\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\057\007\055\011\061\013\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\100\007\055\011\061\013\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\106" +
    "\007\055\011\061\013\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\114\007\055\011\061\013\060\001" +
    "\001\000\002\001\001\000\012\006\116\007\055\011\061" +
    "\013\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\135\007\055\011\061\013\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\143\007\055\011\061" +
    "\013\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\151\007\055\011\061\013\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\157\007\055\011\061\013" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\170\016\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\204\022\201\001\001\000\002\001\001\000" +
    "\004\021\224\001\001\000\004\021\223\001\001\000\002" +
    "\001\001\000\004\021\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\214\001\001\000\004\021\213" +
    "\001\001\000\004\021\212\001\001\000\004\021\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDef$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDef$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDef$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    private ArrayList<CompileError> erroresEncontrados; 
    
    public ArrayList<CompileError> getErroresEncontrados(){
        return erroresEncontrados;
    }
    public void setErroresEncontrados(ArrayList<CompileError> erroresEncontrados){
        this.erroresEncontrados = erroresEncontrados;
    }
    
    private void agregarError(Symbol symbolError, String mensajeError){
        erroresEncontrados.add(new CompileError(symbolError, "Sintactico", mensajeError));
    }
    
    private Stack<Symbol> errorStack = new Stack<>();

    public void syntax_error(Symbol s){
        this.s = s;
        errorStack.push(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        this.s = s;
        errorStack.push(s);
        Symbol e = errorStack.pop();
        agregarError(e,"Error Irrecuperable");
    }
    
    public Symbol getS(){
        return this.s;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDef$actions {
  private final ParserDef parser;

  /** Constructor */
  CUP$ParserDef$actions(ParserDef parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDef$do_action_part00000000(
    int                        CUP$ParserDef$act_num,
    java_cup.runtime.lr_parser CUP$ParserDef$parser,
    java.util.Stack            CUP$ParserDef$stack,
    int                        CUP$ParserDef$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDef$result;

      /* select the action based on the action number */
      switch (CUP$ParserDef$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		RESULT = start_val;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDef$parser.done_parsing();
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= declaracion_variables declaracion_html 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracion_variables ::= declaracion_variable declaracion_variables 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_variables",1, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracion_variables ::= asignacion declaracion_variables 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_variables",1, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_variable ::= PR_INTEGER declaraciond 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_variable",2, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_variable ::= PR_STRING declaraciond 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_variable",2, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciond ::= VARIABLE_IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciond",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciond ::= asignacion 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciond",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // asignacion ::= VARIABLE_IDENTIFICADOR IGUAL expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_html ::= MENOR_QUE TAG_HTML MAYOR_QUE declaraciones_etiquetas MENOR_QUE BARRA TAG_HTML MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_html",3, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_html ::= 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_html",3, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones_etiquetas ::= etiqueta 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciones_etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones_etiquetas ::= acceso_variable 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciones_etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaraciones_etiquetas ::= texto_plano 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciones_etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // texto_plano ::= TEXTO 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",9, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiqueta ::= MENOR_QUE TAG_HTML MAYOR_QUE declaraciones_etiquetas MENOR_QUE BARRA TAG_HTML MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiqueta ::= MENOR_QUE TAG_HEADER MAYOR_QUE declaraciones_etiquetas MENOR_QUE BARRA TAG_HEADER MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // etiqueta ::= MENOR_QUE TAG_TABLE MAYOR_QUE declaraciones_etiquetas MENOR_QUE BARRA TAG_TABLE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiqueta ::= MENOR_QUE tag_for MAYOR_QUE declaraciones_etiquetas MENOR_QUE BARRA TAG_FOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiqueta ::= MENOR_QUE TAG_TR MAYOR_QUE declaraciones_etiquetas MENOR_QUE BARRA TAG_TR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiqueta ::= MENOR_QUE TAG_TH MAYOR_QUE declaraciones_etiquetas MENOR_QUE BARRA TAG_TH MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // etiqueta ::= MENOR_QUE TAG_TD MAYOR_QUE declaraciones_etiquetas MENOR_QUE BARRA TAG_TD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etiqueta ::= MENOR_QUE TAG_BR MAYOR_QUE declaraciones_etiquetas 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tag_for ::= TAG_FOR ITERADOR DOS_PUNTOS valor_numerico HASTA DOS_PUNTOS valor_numerico PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tag_for",6, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor_numerico ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("valor_numerico",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor_numerico ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("valor_numerico",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // acceso_variable ::= DOLAR DOLAR PAR_IZQ variable PAR_DER DOLAR DOLAR 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("acceso_variable",7, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable ::= result 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable ::= 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // result ::= RESULT PUNTO resultd 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("result",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // resultd ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("resultd",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // resultd ::= VARIABLE_IDENTIFICADOR CORCH_IZQ expresion_matematica CORCH_DER resultdd 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("resultd",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // resultdd ::= PUNTO VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("resultdd",14, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion CRUZ expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = exp1.toString()+"+"+exp2.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion GUION expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = exp1.toString()+"-"+exp2.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion ASTERISCO expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = exp1.toString()+"*"+exp2.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion BARRA expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = exp1.toString()+"/"+exp2.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= GUION expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = "-"+exp1.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		RESULT = "("+exp1.toString()+")";
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= STRING 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = cadena.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = numero.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object nombreVariable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = nombreVariable.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= error expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            Symbol e = errorStack.pop();
            agregarError(e,"Expresion mal definida");
            RESULT = exp.toString();
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_matematica ::= expresion CRUZ expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = exp1.toString()+"+"+exp2.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_matematica ::= expresion GUION expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = exp1.toString()+"-"+exp2.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_matematica ::= expresion ASTERISCO expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = exp1.toString()+"*"+exp2.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_matematica ::= expresion BARRA expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = exp1.toString()+"/"+exp2.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_matematica ::= GUION expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = "-"+exp1.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_matematica ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		RESULT = "("+exp1.toString()+")";
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_matematica ::= ENTERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = numero.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_matematica ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object nombreVariable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = nombreVariable.toString();
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_matematica ::= error expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            Symbol e = errorStack.pop();
            agregarError(e,"Expresion Matematica mal definida");
            RESULT = exp.toString();
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDef$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDef$do_action(
    int                        CUP$ParserDef$act_num,
    java_cup.runtime.lr_parser CUP$ParserDef$parser,
    java.util.Stack            CUP$ParserDef$stack,
    int                        CUP$ParserDef$top)
    throws java.lang.Exception
    {
              return CUP$ParserDef$do_action_part00000000(
                               CUP$ParserDef$act_num,
                               CUP$ParserDef$parser,
                               CUP$ParserDef$stack,
                               CUP$ParserDef$top);
    }
}

}
