
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.universidad.appproyecto1.analisis.analisisDef;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Hashtable;
import java.util.Set;
import java.util.Map;
import java.util.LinkedList;
import com.universidad.appproyecto1.analisis.CompileError;
import com.universidad.appproyecto1.analisis.TablaDeSimbolos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDef extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDef() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDef(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDef(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\016\004\000\002\016\003\000" +
    "\002\017\003\000\002\017\005\000\002\020\006\000\002" +
    "\005\011\000\002\005\002\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\002\000\002\007\011" +
    "\000\002\007\011\000\002\007\011\000\002\007\011\000" +
    "\002\007\011\000\002\007\011\000\002\007\005\000\002" +
    "\011\012\000\002\026\003\000\002\026\003\000\002\012" +
    "\007\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\002\000\002\021\005\000\002\022" +
    "\003\000\002\022\007\000\002\023\004\000\002\023\002" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\004\000\002\024\005\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\004\000" +
    "\002\025\005\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\014\002\ufffd\004\007\005\010\043\ufffd\047" +
    "\004\001\002\000\004\041\022\001\002\000\006\002\ufff4" +
    "\043\111\001\002\000\014\002\ufffd\004\007\005\010\043" +
    "\ufffd\047\004\001\002\000\004\047\015\001\002\000\004" +
    "\047\015\001\002\000\004\002\014\001\002\000\014\002" +
    "\ufffd\004\007\005\010\043\ufffd\047\004\001\002\000\006" +
    "\002\ufffe\043\ufffe\001\002\000\004\002\001\001\002\000" +
    "\010\023\020\025\023\041\022\001\002\000\014\002\ufffb" +
    "\004\ufffb\005\ufffb\043\ufffb\047\ufffb\001\002\000\014\002" +
    "\ufff9\004\ufff9\005\ufff9\043\ufff9\047\ufff9\001\002\000\004" +
    "\047\105\001\002\000\014\002\ufffa\004\ufffa\005\ufffa\043" +
    "\ufffa\047\ufffa\001\002\000\020\003\032\020\033\030\024" +
    "\037\031\046\025\047\027\050\026\001\002\000\014\002" +
    "\ufff8\004\ufff8\005\ufff8\043\ufff8\047\ufff8\001\002\000\020" +
    "\003\032\020\033\030\024\037\031\046\025\047\027\050" +
    "\026\001\002\000\016\025\uffb3\031\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\001\002\000\016\025\uffb4\031\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\001\002\000\016\025\uffb2" +
    "\031\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\001\002\000" +
    "\014\025\102\035\072\036\071\037\073\040\074\001\002" +
    "\000\020\003\032\020\033\030\024\037\031\046\025\047" +
    "\027\050\026\001\002\000\020\003\032\020\033\030\024" +
    "\037\031\046\025\047\027\050\026\001\002\000\004\022" +
    "\035\001\002\000\016\025\uffb1\031\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\001\002\000\004\047\036\001\002\000" +
    "\022\025\uffbe\031\uffbe\032\040\033\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\001\002\000\020\025\uffbf\031\uffbf\033" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\001\002\000\016" +
    "\003\044\020\033\030\046\037\043\046\047\047\042\001" +
    "\002\000\016\031\uffa7\033\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\001\002\000\016\031\uffa8\033\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\001\002\000\016\003\044\020\033" +
    "\030\046\037\043\046\047\047\042\001\002\000\016\003" +
    "\044\020\033\030\046\037\043\046\047\047\042\001\002" +
    "\000\014\033\062\035\052\036\051\037\053\040\054\001" +
    "\002\000\016\003\044\020\033\030\046\037\043\046\047" +
    "\047\042\001\002\000\016\031\uffa9\033\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\001\002\000\014\031\055\035\052" +
    "\036\051\037\053\040\054\001\002\000\016\003\044\020" +
    "\033\030\046\037\043\046\047\047\042\001\002\000\016" +
    "\003\044\020\033\030\046\037\043\046\047\047\042\001" +
    "\002\000\016\003\044\020\033\030\046\037\043\046\047" +
    "\047\042\001\002\000\016\003\044\020\033\030\046\037" +
    "\043\046\047\047\042\001\002\000\016\031\uffaa\033\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\001\002\000\016\031" +
    "\uffac\033\uffac\035\uffac\036\uffac\037\uffac\040\uffac\001\002" +
    "\000\016\031\uffae\033\uffae\035\uffae\036\051\037\uffae\040" +
    "\054\001\002\000\016\031\uffaf\033\uffaf\035\uffaf\036\051" +
    "\037\uffaf\040\054\001\002\000\016\031\uffad\033\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\001\002\000\022\022\063" +
    "\025\uffbb\031\uffbb\033\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\001\002\000\004\047\065\001\002\000\020\025\uffbd" +
    "\031\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\001" +
    "\002\000\020\025\uffbc\031\uffbc\033\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\001\002\000\016\031\uffa6\033\uffa6\035" +
    "\052\036\051\037\053\040\054\001\002\000\016\031\uffab" +
    "\033\uffab\035\uffab\036\051\037\uffab\040\054\001\002\000" +
    "\016\025\uffb0\031\uffb0\035\072\036\071\037\073\040\074" +
    "\001\002\000\020\003\032\020\033\030\024\037\031\046" +
    "\025\047\027\050\026\001\002\000\020\003\032\020\033" +
    "\030\024\037\031\046\025\047\027\050\026\001\002\000" +
    "\020\003\032\020\033\030\024\037\031\046\025\047\027" +
    "\050\026\001\002\000\020\003\032\020\033\030\024\037" +
    "\031\046\025\047\027\050\026\001\002\000\016\025\uffb7" +
    "\031\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\001\002\000" +
    "\016\025\uffb9\031\uffb9\035\uffb9\036\071\037\uffb9\040\074" +
    "\001\002\000\016\025\uffba\031\uffba\035\uffba\036\071\037" +
    "\uffba\040\074\001\002\000\016\025\uffb8\031\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\001\002\000\016\025\uffb6\031" +
    "\uffb6\035\uffb6\036\071\037\uffb6\040\074\001\002\000\014" +
    "\002\ufff6\004\ufff6\005\ufff6\043\ufff6\047\ufff6\001\002\000" +
    "\014\031\104\035\072\036\071\037\073\040\074\001\002" +
    "\000\016\025\uffb5\031\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\001\002\000\006\023\020\025\023\001\002\000\014" +
    "\002\ufff7\004\ufff7\005\ufff7\043\ufff7\047\ufff7\001\002\000" +
    "\014\002\ufffc\004\ufffc\005\ufffc\043\ufffc\047\ufffc\001\002" +
    "\000\006\002\uffff\043\uffff\001\002\000\004\006\113\001" +
    "\002\000\004\002\000\001\002\000\004\042\114\001\002" +
    "\000\114\004\120\005\143\006\125\007\147\010\145\011" +
    "\142\012\123\013\124\014\134\015\141\016\144\017\130" +
    "\020\164\021\ufff0\022\153\023\140\024\121\025\135\026" +
    "\126\027\152\030\146\031\115\032\116\033\137\034\155" +
    "\035\132\036\122\037\133\040\151\041\131\043\160\044" +
    "\163\045\127\046\117\047\150\050\157\051\161\001\002" +
    "\000\114\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002" +
    "\000\114\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002" +
    "\000\114\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002" +
    "\000\114\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\001\002" +
    "\000\114\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\001\002" +
    "\000\114\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002" +
    "\000\114\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\001\002" +
    "\000\114\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002" +
    "\000\114\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\001\002" +
    "\000\114\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\001\002" +
    "\000\004\030\253\001\002\000\114\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\001\002\000\114\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\001\002\000\114\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\001\002\000\114\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\001\002\000\114\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\001\002\000\114\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\001\002\000\114\004\120\005\143\006" +
    "\125\007\147\010\145\011\142\012\123\013\124\014\134" +
    "\015\141\016\144\017\130\020\164\021\ufff0\022\153\023" +
    "\140\024\121\025\135\026\126\027\152\030\146\031\115" +
    "\032\116\033\137\034\155\035\132\036\122\037\133\040" +
    "\151\041\131\043\160\044\163\045\127\046\117\047\150" +
    "\050\157\051\161\001\002\000\114\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\001\002\000\114\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\001\002\000\114\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\001\002\000\114\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\001\002\000\114\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\001\002\000\114\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\001\002\000\114\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\001\002\000\114\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\001\002\000\114\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\001\002\000\114\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\001\002\000\114\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\001\002\000\114\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\001\002\000\114\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\001\002\000\004\021\247\001\002\000" +
    "\114\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000" +
    "\114\004\120\005\143\006\125\007\147\010\145\011\142" +
    "\012\123\013\124\014\134\015\141\016\144\017\130\020" +
    "\164\021\ufff0\022\153\023\140\024\121\025\135\026\126" +
    "\027\152\030\146\031\115\032\116\033\137\034\155\035" +
    "\132\036\122\037\133\040\151\041\131\043\160\044\163" +
    "\045\127\046\117\047\150\050\157\051\161\001\002\000" +
    "\114\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\001\002\000" +
    "\020\007\175\010\172\011\174\014\173\015\171\016\167" +
    "\017\170\001\002\000\114\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\001\002\000\114\004\120\005\143\006\125\007" +
    "\147\010\145\011\142\012\123\013\124\014\134\015\141" +
    "\016\144\017\130\020\164\021\ufff0\022\153\023\140\024" +
    "\121\025\135\026\126\027\152\030\146\031\115\032\116" +
    "\033\137\034\155\035\132\036\122\037\133\040\151\041" +
    "\131\043\160\044\163\045\127\046\117\047\150\050\157" +
    "\051\161\001\002\000\114\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\001\002\000\114\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\001\002\000\004\021\ufff3\001\002\000\004\042" +
    "\241\001\002\000\004\042\234\001\002\000\004\042\233" +
    "\001\002\000\004\042\226\001\002\000\004\042\221\001" +
    "\002\000\004\042\214\001\002\000\004\012\203\001\002" +
    "\000\004\042\176\001\002\000\114\004\120\005\143\006" +
    "\125\007\147\010\145\011\142\012\123\013\124\014\134" +
    "\015\141\016\144\017\130\020\164\021\ufff0\022\153\023" +
    "\140\024\121\025\135\026\126\027\152\030\146\031\115" +
    "\032\116\033\137\034\155\035\132\036\122\037\133\040" +
    "\151\041\131\043\160\044\163\045\127\046\117\047\150" +
    "\050\157\051\161\001\002\000\004\021\200\001\002\000" +
    "\004\007\201\001\002\000\004\042\202\001\002\000\114" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\050\uffef\051\uffef\001\002\000\004" +
    "\024\204\001\002\000\004\047\205\001\002\000\004\013" +
    "\206\001\002\000\004\024\207\001\002\000\006\046\212" +
    "\047\210\001\002\000\004\025\uffe7\001\002\000\004\025" +
    "\213\001\002\000\004\025\uffe6\001\002\000\004\042\uffe8" +
    "\001\002\000\114\004\120\005\143\006\125\007\147\010" +
    "\145\011\142\012\123\013\124\014\134\015\141\016\144" +
    "\017\130\020\164\021\ufff0\022\153\023\140\024\121\025" +
    "\135\026\126\027\152\030\146\031\115\032\116\033\137" +
    "\034\155\035\132\036\122\037\133\040\151\041\131\043" +
    "\160\044\163\045\127\046\117\047\150\050\157\051\161" +
    "\001\002\000\004\021\216\001\002\000\004\014\217\001" +
    "\002\000\004\042\220\001\002\000\114\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047" +
    "\uffec\050\uffec\051\uffec\001\002\000\114\004\120\005\143" +
    "\006\125\007\147\010\145\011\142\012\123\013\124\014" +
    "\134\015\141\016\144\017\130\020\164\021\ufff0\022\153" +
    "\023\140\024\121\025\135\026\126\027\152\030\146\031" +
    "\115\032\116\033\137\034\155\035\132\036\122\037\133" +
    "\040\151\041\131\043\160\044\163\045\127\046\117\047" +
    "\150\050\157\051\161\001\002\000\004\021\223\001\002" +
    "\000\004\010\224\001\002\000\004\042\225\001\002\000" +
    "\114\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\001\002\000" +
    "\114\004\120\005\143\006\125\007\147\010\145\011\142" +
    "\012\123\013\124\014\134\015\141\016\144\017\130\020" +
    "\164\021\ufff0\022\153\023\140\024\121\025\135\026\126" +
    "\027\152\030\146\031\115\032\116\033\137\034\155\035" +
    "\132\036\122\037\133\040\151\041\131\043\160\044\163" +
    "\045\127\046\117\047\150\050\157\051\161\001\002\000" +
    "\004\021\230\001\002\000\004\015\231\001\002\000\004" +
    "\042\232\001\002\000\114\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\001\002\000\114\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\001\002\000\114\004\120\005\143\006\125\007" +
    "\147\010\145\011\142\012\123\013\124\014\134\015\141" +
    "\016\144\017\130\020\164\021\ufff0\022\153\023\140\024" +
    "\121\025\135\026\126\027\152\030\146\031\115\032\116" +
    "\033\137\034\155\035\132\036\122\037\133\040\151\041" +
    "\131\043\160\044\163\045\127\046\117\047\150\050\157" +
    "\051\161\001\002\000\004\021\236\001\002\000\004\016" +
    "\237\001\002\000\004\042\240\001\002\000\114\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\001\002\000\114\004\120" +
    "\005\143\006\125\007\147\010\145\011\142\012\123\013" +
    "\124\014\134\015\141\016\144\017\130\020\164\021\ufff0" +
    "\022\153\023\140\024\121\025\135\026\126\027\152\030" +
    "\146\031\115\032\116\033\137\034\155\035\132\036\122" +
    "\037\133\040\151\041\131\043\160\044\163\045\127\046" +
    "\117\047\150\050\157\051\161\001\002\000\004\021\243" +
    "\001\002\000\004\011\244\001\002\000\004\042\245\001" +
    "\002\000\114\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\001" +
    "\002\000\004\021\ufff2\001\002\000\004\006\250\001\002" +
    "\000\004\042\251\001\002\000\004\002\ufff5\001\002\000" +
    "\004\021\ufff1\001\002\000\010\020\033\031\uffc0\047\255" +
    "\001\002\000\004\031\uffc1\001\002\000\004\031\uffc2\001" +
    "\002\000\004\031\257\001\002\000\004\045\260\001\002" +
    "\000\114\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\012\002\010\003\004\004\005\020\011\001" +
    "\001\000\002\001\001\000\004\005\111\001\001\000\010" +
    "\003\107\004\005\020\011\001\001\000\006\016\106\020" +
    "\016\001\001\000\006\016\015\020\016\001\001\000\002" +
    "\001\001\000\010\003\012\004\005\020\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\033\024\027\001\001\000\002" +
    "\001\001\000\006\021\033\024\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\033\024\100\001\001\000\006\021\033\024" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\040\025\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\040\025\066\001\001\000\006\021" +
    "\040\025\065\001\001\000\002\001\001\000\006\021\040" +
    "\025\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\040\025\060\001\001\000\006\021\040\025\057" +
    "\001\001\000\006\021\040\025\056\001\001\000\006\021" +
    "\040\025\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\033\024\077\001\001\000\006" +
    "\021\033\024\076\001\001\000\006\021\033\024\075\001" +
    "\001\000\006\021\033\024\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\153\007\161\012" +
    "\155\014\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\251\007" +
    "\161\012\155\014\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\245\007\161\012\155\014\135\001" +
    "\001\000\002\001\001\000\004\011\165\001\001\000\002" +
    "\001\001\000\012\006\164\007\161\012\155\014\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\176\007\161\012" +
    "\155\014\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\214\007\161" +
    "\012\155\014\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\221" +
    "\007\161\012\155\014\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\226\007\161\012\155\014\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\234\007\161\012\155\014" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\241\007\161\012" +
    "\155\014\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\255\021\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDef$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDef$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDef$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    private ArrayList<CompileError> erroresEncontrados; 
    
    public ArrayList<CompileError> getErroresEncontrados(){
        return erroresEncontrados;
    }
    public void setErroresEncontrados(ArrayList<CompileError> erroresEncontrados){
        this.erroresEncontrados = erroresEncontrados;
    }
    
    private void agregarError(Symbol symbolError, String mensajeError){
        erroresEncontrados.add(new CompileError(symbolError, "Sintactico", mensajeError));
    }
    
    private Stack<Symbol> errorStack = new Stack<>();

    public void syntax_error(Symbol s){
        this.s = s;
        errorStack.push(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        this.s = s;
        errorStack.push(s);
        Symbol e = errorStack.pop();
        agregarError(e,"Error Irrecuperable");
    }
    
    public Symbol getS(){
        return this.s;
    }

    private TablaDeSimbolos tablaDeSimbolos = new TablaDeSimbolos("Programa");
    
    public TablaDeSimbolos getTablaDeSimbolos(){
        return tablaDeSimbolos;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDef$actions {
  private final ParserDef parser;

  /** Constructor */
  CUP$ParserDef$actions(ParserDef parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDef$do_action_part00000000(
    int                        CUP$ParserDef$act_num,
    java_cup.runtime.lr_parser CUP$ParserDef$parser,
    java.util.Stack            CUP$ParserDef$stack,
    int                        CUP$ParserDef$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDef$result;

      /* select the action based on the action number */
      switch (CUP$ParserDef$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		RESULT = start_val;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDef$parser.done_parsing();
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= declaracion_variables declaracion_html 
            {
              Object RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object variables = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
        tablaDeSimbolos.agregarEntrada(variables,"Declaracion Variables");
        tablaDeSimbolos.agregarEntrada(html,"Definicion HTML");
        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracion_variables ::= declaracion_variable declaracion_variables 
            {
              Object RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int tablaDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int tablaDeclaracionesright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object tablaDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        ((TablaDeSimbolos)tablaDeclaraciones).agregarEntradaInicio(declaracion,"Declaracion Variable");
                        RESULT = tablaDeclaraciones;
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_variables",1, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracion_variables ::= asignacion declaracion_variables 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int tablaDeclaracionesleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int tablaDeclaracionesright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object tablaDeclaraciones = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        ((TablaDeSimbolos)tablaDeclaraciones).agregarEntradaInicio(asignacion,"Asignacion Variable");
                        RESULT = tablaDeclaraciones;
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_variables",1, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_variables ::= 
            {
              Object RESULT =null;
		RESULT = new TablaDeSimbolos("Declaracion Variables");
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_variables",1, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_variable ::= PR_INTEGER declaraciond 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        ((TablaDeSimbolos)declaracion).agregarEntradaInicio(new Symbol(sym.PR_INTEGER, integerleft,integerright,integer),"Tipo");
                        RESULT = declaracion;
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_variable",2, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_variable ::= PR_STRING declaraciond 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        ((TablaDeSimbolos)declaracion).agregarEntradaInicio(new Symbol(sym.PR_STRING, stringleft,stringright,string),"Tipo");
                        RESULT = declaracion;
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_variable",2, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciond ::= VARIABLE_IDENTIFICADOR declaraciondd 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                ((TablaDeSimbolos)declaracion).agregarEntradaInicio(new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable),"Identificador");
                RESULT = declaracion;
                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciond",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciond ::= asignacion 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                TablaDeSimbolos tabla = new TablaDeSimbolos("Declaracion Variable");
                tabla.agregarEntrada(asignacion, "Asignacion");
                RESULT = tabla;
                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciond",12, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaraciondd ::= PUNTO_COMA 
            {
              Object RESULT =null;
		
                RESULT = new TablaDeSimbolos("Declaracion Variable");
                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciondd",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaraciondd ::= COMA VARIABLE_IDENTIFICADOR declaraciondd 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                ((TablaDeSimbolos)declaracion).agregarEntradaInicio(new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable),"Identificador");
                RESULT = declaracion;
                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciondd",13, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asignacion ::= VARIABLE_IDENTIFICADOR IGUAL expresion PUNTO_COMA 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Asignacion");
            tabla.agregarEntrada(new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable),"Identificador");
            tabla.agregarEntrada(valor,"Valor");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_html ::= MENOR_QUE TAG_HTML MAYOR_QUE declaraciones_etiquetas FIN_TAG TAG_HTML MAYOR_QUE 
            {
              Object RESULT =null;
		int tagAperturaleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int tagAperturaright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Object tagApertura = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int tagCerrarleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagCerrarright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object tagCerrar = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
                    TablaDeSimbolos tabla = new TablaDeSimbolos("Definicion HTML");
                    tabla.agregarEntrada(new Symbol(sym.TAG_HTML,tagAperturaleft,tagAperturaright,tagApertura),"Tag Abre");
                    tabla.agregarEntrada(hijos, "Hijos");
                    tabla.agregarEntrada(new Symbol(sym.TAG_HTML,tagCerrarleft,tagCerrarright,tagCerrar),"Tag Cierra");
                    RESULT = tabla;
                    
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_html",3, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_html ::= 
            {
              Object RESULT =null;
		RESULT = new TablaDeSimbolos("Definicion HTML");
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaracion_html",3, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaraciones_etiquetas ::= etiqueta declaraciones_etiquetas 
            {
              Object RESULT =null;
		int etiquetaleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int etiquetaright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object etiqueta = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        ((TablaDeSimbolos)hijos).agregarEntradaInicio(etiqueta,((TablaDeSimbolos)etiqueta).getScope());
                        RESULT = hijos;
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciones_etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaraciones_etiquetas ::= acceso_variable declaraciones_etiquetas 
            {
              Object RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object acceso = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        ((TablaDeSimbolos)hijos).agregarEntradaInicio(acceso,"Acceso Variable");
                        RESULT = hijos;
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciones_etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaraciones_etiquetas ::= texto_plano declaraciones_etiquetas 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
                        ((TablaDeSimbolos)hijos).agregarEntradaInicio(texto.toString(),"Texto");
                        RESULT = hijos;
                        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciones_etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaraciones_etiquetas ::= 
            {
              Object RESULT =null;
		RESULT = new TablaDeSimbolos("Hijos");
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("declaraciones_etiquetas",4, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiqueta ::= MENOR_QUE TAG_HEADER MAYOR_QUE declaraciones_etiquetas FIN_TAG TAG_HEADER MAYOR_QUE 
            {
              Object RESULT =null;
		int tagAbreleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int tagAbreright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Object tagAbre = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int tagCierraleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagCierraright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object tagCierra = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Tag Header");
            tabla.agregarEntrada(new Symbol(sym.TAG_HEADER,tagAbreleft,tagAbreright,tagAbre),"Tag Abre");
            tabla.agregarEntrada(hijos, "Hijos");
            tabla.agregarEntrada(new Symbol(sym.TAG_HEADER,tagCierraleft,tagCierraright,tagCierra),"Tag Cierra");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiqueta ::= MENOR_QUE TAG_TABLE MAYOR_QUE declaraciones_etiquetas FIN_TAG TAG_TABLE MAYOR_QUE 
            {
              Object RESULT =null;
		int tagAbreleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int tagAbreright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Object tagAbre = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int tagCierraleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagCierraright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object tagCierra = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Tag Table");
            tabla.agregarEntrada(new Symbol(sym.TAG_TABLE,tagAbreleft,tagAbreright,tagAbre),"Tag Abre");
            tabla.agregarEntrada(hijos, "Hijos");
            tabla.agregarEntrada(new Symbol(sym.TAG_TABLE,tagCierraleft,tagCierraright,tagCierra),"Tag Cierra");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiqueta ::= MENOR_QUE tag_for MAYOR_QUE declaraciones_etiquetas FIN_TAG TAG_FOR MAYOR_QUE 
            {
              Object RESULT =null;
		int condicion_forleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int condicion_forright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Object condicion_for = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int tagCierraleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagCierraright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object tagCierra = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Tag For");
            tabla.agregarEntrada(condicion_for,"Condicion For");
            tabla.agregarEntrada(hijos, "Hijos");
            tabla.agregarEntrada(new Symbol(sym.TAG_FOR,tagCierraleft,tagCierraright,tagCierra),"Tag Cierra");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // etiqueta ::= MENOR_QUE TAG_TR MAYOR_QUE declaraciones_etiquetas FIN_TAG TAG_TR MAYOR_QUE 
            {
              Object RESULT =null;
		int tagAbreleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int tagAbreright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Object tagAbre = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int tagCierraleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagCierraright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object tagCierra = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Tag Row");
            tabla.agregarEntrada(new Symbol(sym.TAG_TR,tagAbreleft,tagAbreright,tagAbre),"Tag Abre");
            tabla.agregarEntrada(hijos, "Hijos");
            tabla.agregarEntrada(new Symbol(sym.TAG_TR,tagCierraleft,tagCierraright,tagCierra),"Tag Cierra");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etiqueta ::= MENOR_QUE TAG_TH MAYOR_QUE declaraciones_etiquetas FIN_TAG TAG_TH MAYOR_QUE 
            {
              Object RESULT =null;
		int tagAbreleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int tagAbreright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Object tagAbre = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int tagCierraleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagCierraright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object tagCierra = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Tag Header Tabla");
            tabla.agregarEntrada(new Symbol(sym.TAG_TH,tagAbreleft,tagAbreright,tagAbre),"Tag Abre");
            tabla.agregarEntrada(hijos, "Hijos");
            tabla.agregarEntrada(new Symbol(sym.TAG_TH,tagCierraleft,tagCierraright,tagCierra),"Tag Cierra");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiqueta ::= MENOR_QUE TAG_TD MAYOR_QUE declaraciones_etiquetas FIN_TAG TAG_TD MAYOR_QUE 
            {
              Object RESULT =null;
		int tagAbreleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).left;
		int tagAbreright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).right;
		Object tagAbre = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-5)).value;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-3)).value;
		int tagCierraleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagCierraright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object tagCierra = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Tag Data");
            tabla.agregarEntrada(new Symbol(sym.TAG_TD,tagAbreleft,tagAbreright,tagAbre),"Tag Abre");
            tabla.agregarEntrada(hijos, "Hijos");
            tabla.agregarEntrada(new Symbol(sym.TAG_TD,tagCierraleft,tagCierraright,tagCierra),"Tag Cierra");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiqueta ::= MENOR_QUE TAG_BR MAYOR_QUE 
            {
              Object RESULT =null;
		int tagBRleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int tagBRright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object tagBR = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Tag BR");
            tabla.agregarEntrada(new Symbol(sym.TAG_BR,tagBRleft,tagBRright,tagBR),"Tag");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tag_for ::= TAG_FOR ITERADOR DOS_PUNTOS VARIABLE_IDENTIFICADOR HASTA DOS_PUNTOS valor_numerico PUNTO_COMA 
            {
              Object RESULT =null;
		int desdeleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int desderight = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Object desde = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int hastaleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int hastaright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object hasta = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		
        TablaDeSimbolos tabla = new TablaDeSimbolos("Condicion For");
        tabla.agregarEntrada(new Symbol(sym.VARIABLE_IDENTIFICADOR,desdeleft,desderight,desde),"Iterador");
        tabla.agregarEntrada(hasta,"Hasta");
        RESULT = tabla;
        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("tag_for",7, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-7)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor_numerico ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable);
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("valor_numerico",20, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor_numerico ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = new Symbol(sym.ENTERO,enteroleft,enteroright,entero);
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("valor_numerico",20, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // acceso_variable ::= DOBLE_DOLAR PAR_IZQ variable PAR_DER DOBLE_DOLAR 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		
                TablaDeSimbolos tabla = new TablaDeSimbolos("Acceso Variable");
                tabla.agregarEntrada(variable,"Variable");
                RESULT = tabla;
                
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("acceso_variable",8, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // texto_plano ::= PR_INTEGER 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // texto_plano ::= PR_STRING 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // texto_plano ::= TAG_HTML 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // texto_plano ::= TAG_HEADER 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // texto_plano ::= TAG_TABLE 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // texto_plano ::= TAG_FOR 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // texto_plano ::= ITERADOR 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // texto_plano ::= HASTA 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // texto_plano ::= TAG_TR 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // texto_plano ::= TAG_TH 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // texto_plano ::= TAG_TD 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // texto_plano ::= TAG_BR 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // texto_plano ::= RESULT 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // texto_plano ::= PUNTO 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // texto_plano ::= COMA 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // texto_plano ::= DOS_PUNTOS 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // texto_plano ::= PUNTO_COMA 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // texto_plano ::= LLAVE_IZQ 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // texto_plano ::= LLAVE_DER 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // texto_plano ::= PAR_IZQ 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // texto_plano ::= PAR_DER 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // texto_plano ::= CORCH_IZQ 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // texto_plano ::= CORCH_DER 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // texto_plano ::= MENOS_UNITARIO 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // texto_plano ::= CRUZ 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // texto_plano ::= ASTERISCO 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // texto_plano ::= GUION 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // texto_plano ::= BARRA 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // texto_plano ::= IGUAL 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // texto_plano ::= DOLAR 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // texto_plano ::= ENTERO 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // texto_plano ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // texto_plano ::= STRING 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // texto_plano ::= TEXTO 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object texto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = texto;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("texto_plano",10, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable);
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable ::= result 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object result = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = result;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable ::= 
            {
              Object RESULT =null;
		RESULT = new TablaDeSimbolos("Variable Vacia");
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // result ::= RESULT PUNTO resultd 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object result = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		RESULT = result;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("result",15, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // resultd ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
        TablaDeSimbolos tabla = new TablaDeSimbolos("Result");
        tabla.agregarEntrada(new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable),"Identificador");
        RESULT = tabla;
        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("resultd",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // resultd ::= VARIABLE_IDENTIFICADOR CORCH_IZQ expresion_matematica CORCH_DER resultdd 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
        TablaDeSimbolos tabla = new TablaDeSimbolos("Result Lista");
        tabla.agregarEntrada(new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable),"Identificador Lista");
        tabla.agregarEntrada(expresion, "Expresion");
        tabla.agregarEntrada(resto, "Parametro Objeto");
        RESULT = tabla;
        
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("resultd",16, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // resultdd ::= PUNTO VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Parametro Objeto");
            tabla.agregarEntrada(new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable),"Identificador");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("resultdd",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // resultdd ::= 
            {
              Object RESULT =null;
		RESULT = new TablaDeSimbolos("Parametro Objeto");
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("resultdd",17, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion CRUZ expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Suma");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            tabla.agregarEntrada(exp2,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion GUION expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Resta");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            tabla.agregarEntrada(exp2,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion ASTERISCO expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Multiplicacion");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            tabla.agregarEntrada(exp2,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion BARRA expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Division");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            tabla.agregarEntrada(exp2,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= GUION expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Menos Unario");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		RESULT = exp1;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= STRING 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("String");
            tabla.agregarEntrada(new Symbol(sym.STRING,cadenaleft,cadenaright,cadena),"Cadena");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Integer");
            tabla.agregarEntrada(new Symbol(sym.ENTERO,enteroleft,enteroright,entero),"Entero");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Variable");
            tabla.agregarEntrada(new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable),"Identificador");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= result 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object result = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            RESULT = result;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= error expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            Symbol e = errorStack.pop();
            agregarError(e,"Expresion mal definida");
            RESULT = exp;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion_matematica ::= expresion_matematica CRUZ expresion_matematica 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Suma");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            tabla.agregarEntrada(exp2,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion_matematica ::= expresion_matematica GUION expresion_matematica 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Resta");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            tabla.agregarEntrada(exp2,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion_matematica ::= expresion_matematica ASTERISCO expresion_matematica 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Multiplicacion");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            tabla.agregarEntrada(exp2,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion_matematica ::= expresion_matematica BARRA expresion_matematica 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Division");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            tabla.agregarEntrada(exp2,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion_matematica ::= GUION expresion_matematica 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Menos Unario");
            tabla.agregarEntrada(exp1,((TablaDeSimbolos)tabla).getScope());
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion_matematica ::= PAR_IZQ expresion_matematica PAR_DER 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)).value;
		RESULT = exp1;
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_matematica ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Integer");
            tabla.agregarEntrada(new Symbol(sym.ENTERO,enteroleft,enteroright,entero),"Entero");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_matematica ::= VARIABLE_IDENTIFICADOR 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            TablaDeSimbolos tabla = new TablaDeSimbolos("Varible");
            tabla.agregarEntrada(new Symbol(sym.VARIABLE_IDENTIFICADOR,variableleft,variableright,variable),"Identificador");
            RESULT = tabla;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_matematica ::= result 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object result = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            RESULT = result;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion_matematica ::= error expresion_matematica 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$ParserDef$stack.peek()).value;
		
            Symbol e = errorStack.pop();
            agregarError(e,"Expresion Matematica mal definida");
            RESULT = exp;
            
              CUP$ParserDef$result = parser.getSymbolFactory().newSymbol("expresion_matematica",19, ((java_cup.runtime.Symbol)CUP$ParserDef$stack.elementAt(CUP$ParserDef$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDef$stack.peek()), RESULT);
            }
          return CUP$ParserDef$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDef$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDef$do_action(
    int                        CUP$ParserDef$act_num,
    java_cup.runtime.lr_parser CUP$ParserDef$parser,
    java.util.Stack            CUP$ParserDef$stack,
    int                        CUP$ParserDef$top)
    throws java.lang.Exception
    {
              return CUP$ParserDef$do_action_part00000000(
                               CUP$ParserDef$act_num,
                               CUP$ParserDef$parser,
                               CUP$ParserDef$stack,
                               CUP$ParserDef$top);
    }
}

}
