
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.universidad.appproyecto1.analisis.analisisJSON;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Stack;
import com.universidad.appproyecto1.analisis.ParJSON;
import com.universidad.appproyecto1.analisis.CompileError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJSON extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJSON() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJSON(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJSON(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\005\000\002\004\004\000\002\004\005" +
    "\000\002\005\004\000\002\005\005\000\002\006\005\000" +
    "\002\006\002\000\002\006\005\000\002\006\004\000\002" +
    "\007\005\000\002\007\005\000\002\011\004\000\002\012" +
    "\005\000\002\012\002\000\002\012\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\010\005\001\002\000\004\002\061\001" +
    "\002\000\010\003\011\011\007\016\010\001\002\000\004" +
    "\002\000\001\002\000\014\002\ufffd\003\ufffd\004\ufffd\007" +
    "\ufffd\011\ufffd\001\002\000\004\005\057\001\002\000\010" +
    "\003\052\005\024\016\010\001\002\000\010\003\016\004" +
    "\015\011\ufff8\001\002\000\004\011\014\001\002\000\014" +
    "\002\ufffc\003\ufffc\004\ufffc\007\ufffc\011\ufffc\001\002\000" +
    "\006\003\052\016\010\001\002\000\012\003\020\004\015" +
    "\011\ufff8\016\010\001\002\000\004\011\ufffb\001\002\000" +
    "\014\003\020\004\015\005\024\011\ufff8\016\010\001\002" +
    "\000\004\011\ufff6\001\002\000\010\003\016\004\015\011" +
    "\ufff8\001\002\000\004\011\ufff7\001\002\000\022\003\036" +
    "\006\032\010\005\012\026\013\034\014\030\015\033\016" +
    "\031\001\002\000\012\003\uffea\004\uffea\007\uffea\011\uffea" +
    "\001\002\000\012\003\uffed\004\uffed\007\uffed\011\uffed\001" +
    "\002\000\010\003\ufff4\004\ufff4\011\ufff4\001\002\000\012" +
    "\003\uffeb\004\uffeb\007\uffeb\011\uffeb\001\002\000\012\003" +
    "\uffef\004\uffef\007\uffef\011\uffef\001\002\000\024\003\036" +
    "\006\032\007\041\010\005\012\026\013\034\014\030\015" +
    "\033\016\031\001\002\000\012\003\uffee\004\uffee\007\uffee" +
    "\011\uffee\001\002\000\012\003\uffec\004\uffec\007\uffec\011" +
    "\uffec\001\002\000\012\003\uffe9\004\uffe9\007\uffe9\011\uffe9" +
    "\001\002\000\012\003\uffe8\004\uffe8\007\uffe8\011\uffe8\001" +
    "\002\000\004\007\051\001\002\000\010\003\043\004\042" +
    "\007\ufff1\001\002\000\012\003\uffff\004\uffff\007\uffff\011" +
    "\uffff\001\002\000\022\003\036\006\032\010\005\012\026" +
    "\013\034\014\030\015\033\016\031\001\002\000\022\003" +
    "\036\006\032\010\005\012\026\013\034\014\030\015\033" +
    "\016\031\001\002\000\004\007\ufff3\001\002\000\010\003" +
    "\043\004\042\007\ufff1\001\002\000\004\007\ufff0\001\002" +
    "\000\010\003\043\004\042\007\ufff1\001\002\000\004\007" +
    "\ufff2\001\002\000\012\003\ufffe\004\ufffe\007\ufffe\011\ufffe" +
    "\001\002\000\004\005\024\001\002\000\010\003\016\004" +
    "\015\011\ufff8\001\002\000\004\011\ufff9\001\002\000\010" +
    "\003\016\004\015\011\ufff8\001\002\000\004\011\ufffa\001" +
    "\002\000\022\003\036\006\032\010\005\012\026\013\034" +
    "\014\030\015\033\016\031\001\002\000\010\003\ufff5\004" +
    "\ufff5\011\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\006\002\003\004\005\001\001\000\002\001" +
    "\001\000\006\005\012\007\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\054\001" +
    "\001\000\004\006\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\052\001\001\000\006\006\020\007" +
    "\021\001\001\000\002\001\001\000\006\006\020\007\021" +
    "\001\001\000\002\001\001\000\004\006\022\001\001\000" +
    "\002\001\001\000\010\003\024\004\034\010\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\024\004\034" +
    "\010\037\011\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\043\001\001\000\002\001\001\000\010\003" +
    "\024\004\034\010\046\001\001\000\010\003\024\004\034" +
    "\010\044\001\001\000\002\001\001\000\004\012\045\001" +
    "\001\000\002\001\001\000\004\012\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\053\001\001\000\002\001\001\000\004\006\055\001\001" +
    "\000\002\001\001\000\010\003\024\004\034\010\057\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJSON$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJSON$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJSON$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private Symbol s;

        public Symbol getS(){
                return this.s;
        }
        private ParJSON[] objetosJSON;

        public ParJSON[] getObjetosJSON(){
                return objetosJSON;
        }

        private ArrayList<CompileError> erroresEncontrados; 

        public ArrayList<CompileError> getErroresEncontrados(){
                return erroresEncontrados;
        }
        public void setErroresEncontrados(ArrayList<CompileError> erroresEncontrados){
        this.erroresEncontrados = erroresEncontrados;
        }

        private void agregarError(Symbol symbolError, String mensajeError){
                erroresEncontrados.add(new CompileError(symbolError, "Sintactico", mensajeError));
        }
        
        private ArrayList<ParJSON> listaParesActual;
        private ArrayList<Object> listaValoresActual;

        private Stack<Symbol> errorStack = new Stack<>();

        public void syntax_error(Symbol s){
                this.s = s;
                errorStack.push(s);
        }

        public void unrecovered_syntax_error(Symbol s){
                this.s = s;
                errorStack.push(s);
                Symbol e = errorStack.pop();
                agregarError(e,"Error Irrecuperable");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJSON$actions {
  private final ParserJSON parser;

  /** Constructor */
  CUP$ParserJSON$actions(ParserJSON parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJSON$do_action_part00000000(
    int                        CUP$ParserJSON$act_num,
    java_cup.runtime.lr_parser CUP$ParserJSON$parser,
    java.util.Stack            CUP$ParserJSON$stack,
    int                        CUP$ParserJSON$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJSON$result;

      /* select the action based on the action number */
      switch (CUP$ParserJSON$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= json EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		RESULT = start_val;
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJSON$parser.done_parsing();
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // json ::= objeto 
            {
              Object RESULT =null;
		int objetoleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int objetoright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object objeto = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		objetosJSON = (ParJSON[])objeto;
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("json",0, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // arreglo ::= L_CORCHETE R_CORCHETE 
            {
              Object RESULT =null;
		RESULT = new Object[0];
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("arreglo",1, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // arreglo ::= L_CORCHETE lista_valores R_CORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		RESULT = (Object[])lista;
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("arreglo",1, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // objeto ::= L_LLAVE R_LLAVE 
            {
              Object RESULT =null;
		RESULT = new ParJSON[0];
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("objeto",2, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // objeto ::= L_LLAVE lista_pares R_LLAVE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		RESULT = (ParJSON[])lista;
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("objeto",2, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_pares ::= par lista_paresd 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		
                listaParesActual.add((ParJSON)par);
                RESULT =  listaParesActual.toArray(new ParJSON[0]);
                
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_pares",3, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_pares ::= error par lista_paresd 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		
                Symbol e = errorStack.pop();
                agregarError(e,"Se esperaba COMA antes de este token para definir un elemento en la lista");
                listaParesActual.add((ParJSON)par);
                
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_pares",3, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_paresd ::= COMA par lista_paresd 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		
                listaParesActual.add((ParJSON)par);
                
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_paresd",4, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_paresd ::= 
            {
              Object RESULT =null;
		 listaParesActual = new ArrayList<>(); 
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_paresd",4, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_paresd ::= error par lista_paresd 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		
                Symbol e = errorStack.pop();
                agregarError(e,"Se esperaba COMA antes de este token para definir un elemento en la lista");
                listaParesActual.add((ParJSON)par);
                
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_paresd",4, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_paresd ::= error lista_paresd 
            {
              Object RESULT =null;
		
                Symbol e = errorStack.pop();
                agregarError(e,"Se esperaba PAR antes de este token para definir un elemento en la lista");
                
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_paresd",4, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // par ::= STRING DOS_PUNTOS valor 
            {
              Object RESULT =null;
		int llaveleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)).left;
		int llaveright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)).right;
		Object llave = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		RESULT = new ParJSON(new Symbol(sym.STRING, llaveleft,llaveright,llave), valor);
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("par",5, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // par ::= error DOS_PUNTOS valor 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		
        Symbol e = errorStack.pop();
        agregarError(e,"Se esperaba STRING antes de este token para definir el par");
        RESULT = new ParJSON("", valor);
        
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("par",5, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_valores ::= valor lista_valoresd 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		
                listaValoresActual.add(valor);
                RESULT = listaValoresActual.toArray();
                
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_valores",7, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_valoresd ::= COMA valor lista_valoresd 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		
                listaValoresActual.add(valor);
                
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_valoresd",8, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_valoresd ::= 
            {
              Object RESULT =null;
		 listaValoresActual = new ArrayList<>(); 
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_valoresd",8, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_valoresd ::= error valor lista_valoresd 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		 
                Symbol e = errorStack.pop();
                agregarError(e,"Se esperaba COMA antes de este token");
                listaValoresActual = new ArrayList<>();
                listaValoresActual.add(valor);
                
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("lista_valoresd",8, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.elementAt(CUP$ParserJSON$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		 RESULT = new Symbol(sym.STRING, stringleft, stringright, string); 
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor ::= NUMERO 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		 RESULT = new Symbol(sym.NUMERO, numeroleft, numeroright, numero); 
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor ::= TRUE 
            {
              Object RESULT =null;
		int true_boolleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int true_boolright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object true_bool = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		 RESULT = new Symbol(sym.TRUE, true_boolleft, true_boolright, true_bool); 
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor ::= FALSE 
            {
              Object RESULT =null;
		int false_boolleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int false_boolright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object false_bool = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		 RESULT = new Symbol(sym.FALSE, false_boolleft, false_boolright, false_bool); 
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= NULL 
            {
              Object RESULT =null;
		int Nullleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int Nullright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object Null = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		 RESULT = new Symbol(sym.NULL, Nullleft, Nullright, Null); 
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= arreglo 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		 RESULT = arreglo; 
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= objeto 
            {
              Object RESULT =null;
		int objetoleft = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).left;
		int objetoright = ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()).right;
		Object objeto = (Object)((java_cup.runtime.Symbol) CUP$ParserJSON$stack.peek()).value;
		 RESULT = objeto; 
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= error 
            {
              Object RESULT =null;
		 
        Symbol e = errorStack.pop();
        agregarError(e,"Valor invalido");
        RESULT = new Symbol(sym.EOF, 0, 0, ""); 
        
              CUP$ParserJSON$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJSON$stack.peek()), RESULT);
            }
          return CUP$ParserJSON$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJSON$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJSON$do_action(
    int                        CUP$ParserJSON$act_num,
    java_cup.runtime.lr_parser CUP$ParserJSON$parser,
    java.util.Stack            CUP$ParserJSON$stack,
    int                        CUP$ParserJSON$top)
    throws java.lang.Exception
    {
              return CUP$ParserJSON$do_action_part00000000(
                               CUP$ParserJSON$act_num,
                               CUP$ParserJSON$parser,
                               CUP$ParserJSON$stack,
                               CUP$ParserJSON$top);
    }
}

}
